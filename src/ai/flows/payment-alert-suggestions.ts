// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI tool to analyze payment history and suggest when to send payment reminders.
 *
 * - paymentAlertSuggestions - A function that handles the payment alert suggestions process.
 * - PaymentAlertSuggestionsInput - The input type for the paymentAlertSuggestions function.
 * - PaymentAlertSuggestionsOutput - The return type for the paymentAlertSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PaymentAlertSuggestionsInputSchema = z.object({
  lesseeName: z.string().describe('The name of the lessee.'),
  vehicleId: z.string().describe('The ID of the vehicle.'),
  paymentHistory: z
    .array(
      z.object({
        date: z.string().describe('The date of the payment.'),
        amount: z.number().describe('The amount of the payment.'),
        status: z.string().describe('The status of the payment (e.g., paid, pending, overdue).'),
      })
    )
    .describe('The payment history of the lessee.'),
  expectedMonthlyPayment: z.number().describe('The expected monthly payment amount.'),
});

export type PaymentAlertSuggestionsInput = z.infer<typeof PaymentAlertSuggestionsInputSchema>;

const PaymentAlertSuggestionsOutputSchema = z.object({
  shouldSendReminder: z
    .boolean()
    .describe('Whether a payment reminder should be sent to the lessee.'),
  reminderReason: z.string().describe('The reason for sending the payment reminder.'),
});

export type PaymentAlertSuggestionsOutput = z.infer<typeof PaymentAlertSuggestionsOutputSchema>;

export async function paymentAlertSuggestions(input: PaymentAlertSuggestionsInput): Promise<PaymentAlertSuggestionsOutput> {
  return paymentAlertSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'paymentAlertSuggestionsPrompt',
  input: {schema: PaymentAlertSuggestionsInputSchema},
  output: {schema: PaymentAlertSuggestionsOutputSchema},
  prompt: `You are a lease payment advisor. Analyze the payment history of a lessee and suggest whether to send a payment reminder.

  Lessee Name: {{{lesseeName}}}
  Vehicle ID: {{{vehicleId}}}
  Payment History:
  {{#each paymentHistory}}
  - Date: {{{date}}}, Amount: {{{amount}}}, Status: {{{status}}}
  {{/each}}
  Expected Monthly Payment: {{{expectedMonthlyPayment}}}

  Based on this information, determine if a payment reminder should be sent and provide a reason.
  Return a JSON object with 'shouldSendReminder' (true/false) and 'reminderReason'.',
});

const paymentAlertSuggestionsFlow = ai.defineFlow(
  {
    name: 'paymentAlertSuggestionsFlow',
    inputSchema: PaymentAlertSuggestionsInputSchema,
    outputSchema: PaymentAlertSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
